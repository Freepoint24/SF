package main

import (
	"fmt"
	"math/rand"
	//"testing"
	"time"
)

/*Сложность
В лучшем случае: O(n2)
В среднем случае: O(n2)
В худшем случае: O(n2)
Ёмкостная, в худшем: O(1)
*/

//Задание 12.4.1
//Реализуйте сортировку выбором Selection sort, работающую «слева направо»
//(поиск минимальных элементов и перемещение их в начало).

func init() {
	rand.Seed(time.Now().UnixNano()) // необходимо для того, чтобы рандом был похож на рандомный
}

func main() {
	//ar :=[]int{5, 3, 4, 1, 2}
	ar := []int{1, 5, 6, 0, 10, -7, 3, 8, 4, 2, 7}
	//ar := make([]int, 50)
	//for i := range ar {
	//	ar[i] = rand.Intn(200) - 100 // ограничиваем случайно значение от [-100;100]
	//}

	fmt.Printf("Unsorted list:\t%v\n", ar) //не отсортированный массив
	fmt.Println("")
	selectionSort(ar)
	fmt.Println("")
	fmt.Println("Длина слайса:", len(ar))
	fmt.Printf("Sorted list:\t%v\n", ar) //отсортированный масссив
}

// ваш код здесь
// Реализуйте сортировку выбором, работающую «слева направо»
//(поиск минимальных элементов и перемещение их в начало).

func selectionSort(ar []int) {
	for i := 0; i < len(ar); i++ { //переменная i - количество прогонов по слайсу
		minIndex := i     //переменная minIndex - минимальное значение в перебираемом слайсе
		j := i + 1        //индекс начала перебираемого слайса
		for j < len(ar) { //для j меньше длины слайса,
			if ar[j] < ar[minIndex] { //сравнвимваем значение в индексе j c минимальным значением
				minIndex = j //находим минимальное значение в слайсе
			}
			j = j + 1 //сравниваем значение хранящееся в следующем индексе слайса
		}
		ar[i], ar[minIndex] = ar[minIndex], ar[i] //меняем местами минимальное значение и значение в текущем индекс слайса
		fmt.Printf("Sorting list:\t%v\n", ar)
	}
	//fmt.Println("")
	//fmt.Printf("Sorted list:\t%v\n", ar)
}
